import numpy as np
import random
import matplotlib.pyplot as plt
import yfinance as yf

#Gather data for drift (mu) and diffusion (sigma) parameters. 

stock = 'SPY'

start_date = '2018-01-01'
end_date = '2023-01-01'

stock_data = yf.download(stock, start=start_date, end=end_date)
stock_prices = stock_data['Adj Close']
stock_returns = stock_prices.pct_change()

mu = np.mean(stock_returns)
sigma = np.std(stock_returns) 

#Define parameters.

T = 252  
h = 1

#Intialize array and initial stock price. 

S = np.zeros(T)
S[0] = stock_prices.iloc[len(stock_prices)-1]

#Impliment Euler Scheme for Geometric Brownian motion

for i in range(1, T):
    
    z = np.random.normal()
    
    S[i] = S[i-1] + mu*h*S[i-1] + sigma*S[i-1]*np.sqrt(h)*z 

#Gather data for comparison 

start_date = '2023-01-01'
end_date = '2024-01-01'

stock_data = yf.download(stock, start=start_date, end=end_date)
stock_prices = stock_data['Adj Close']
stock_prices = stock_prices.values

#Plot Results

plt.plot(S, label = 'Euler Scheme')
plt.plot(stock_prices, label='SPY (2023)')
plt.xlabel('Time Intervals')
plt.ylabel('Price')
plt.title('Euler Scheme vs SPY (2023)')
plt.legend()
plt.show()
